---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ not ((lookup('env', 'MOLECULE_DEBUG') | bool) or (molecule_yml.provisioner.log | default(false) | bool)) }}"
  vars:
    ssh_port: 22
    keypair_name: "molecule-key_\
      {{ lookup('env','MOLECULE_PROJECT_DIRECTORY').split('/')[-1] }}_\
      {{ lookup('env','MOLECULE_SCENARIO_NAME') }}"
    keypair_path: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/ssh_key"

    ## molecule_file: "{{ lookup('env', 'MOLECULE_FILE') }}"
    ## molecule_instance_config: "{{ lookup('env','MOLECULE_INSTANCE_CONFIG') }}"
    ## molecule_yml: "{{ lookup('file', molecule_file) | from_yaml }}"
    ansible_user: "{{ lookup('env', 'WINRM_ADMIN_ACC') | default('molecule', true) }}"
    ansible_password: "{{ lookup('env', 'WINRM_ADMIN_PWD') | default('M0leCule123!', true) }}"
    ec2_user_data: "{{ lookup('template', './windows') }}"
    winrm_port: 5986

    aws_platforms:
      linux:
        centos7: CentOS Linux 7 x86_64 HVM EBS ENA*
        centos6: CentOS Linux 6 x86_64 HVM EBS ENA*
        ubuntu16: ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server*
        ubuntu18: ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server*
        debian9: debian-stretch-hvm-x86_64*
      windows:
        windows2016: Windows_Server-2016-English-Full-Base-*
        windows2016core: Windows_Server-2016-English-Core-Base-*
        windows2019: Windows_Server-2019-English-Full-Base-*
        windows2019core: Windows_Server-2019-English-Core-Base-*

  tasks:

    - name: Find latest AMI for server
      ec2_ami_facts:
        filters:
          name: '{{ (aws_platforms.linux | combine(aws_platforms.windows))[item.platform] }}'
      register: amis
      when: item.platform in aws_platforms.linux | combine(aws_platforms.windows)
      loop: '{{ molecule_yml.platforms | selectattr("platform", "defined") | list }}'

    - name: Set latest AMIs for platforms
      set_fact:
        last_ami: >-
          {{ last_ami | default({})
            | combine( {item.name:
              (
                amis.results
                  | selectattr("_ansible_item_label.platform", "equalto", item.platform)
                  | sum(attribute="images", start=[])
                  | sort(attribute="creation_date")
                  | map(attribute="image_id")
                  | list
                  | last
              )
                    } )
          }}
      loop: '{{ molecule_yml.platforms | selectattr("platform", "defined") | list }}'

    - name: Set images dict
      set_fact:
        ami_images: >-
          {{ ami_images | default({})
            | combine( { item.name: ((last_ami|default({}))[item.name] | default(item.image)) } ) }}
      loop: '{{ molecule_yml.platforms }}'

    - name: Create keypair
      ec2_key:
        name: '{{ keypair_name }}'
      register: keypair

    - name: Persist the keypair
      copy:
        dest: '{{ keypair_path }}'
        content: '{{ keypair.key.private_key }}'
        mode: 0600
      when: keypair.changed | bool

    - name: Create molecule instance(s)
      ec2:
        region: '{{ item.aws_region | default(omit) }}'
        key_name: '{{ keypair_name }}'
        image: '{{ ami_images[item.name] }}'
        instance_type: '{{ item.instance_type }}'
        instance_profile_name: '{{ item.profile_name | default(omit) }}'
        vpc_subnet_id: '{{ item.vpc_subnet_id }}'
        group: '{{ item.aws_sec_group | default(item.security_group_name) }}'
        instance_tags:
          instance: '{{ item.name }}'
          Name: '{{ item.name }}'
          CreatedTime: '{{ lookup("pipe","date +%Y-%m-%d") }}'
          ManagedBy: 'Molecule'
          ssh_user: '{{ item.ssh_user | default(omit) }}'
        spot_price: '{{ item.spot_price | default(omit) }}'
        spot_wait_timeout: '{{ item.wait_timeout | default(600) }}'
        instance_initiated_shutdown_behavior: '{{ item.shutdown_behavior | default("terminate") }}'
        user_data: '{{ (item.platform in aws_platforms.windows) | ternary(ec2_user_data, omit) }}'
        wait: true
        wait_timeout: '{{ item.wait_timeout | default(600) }}'
        assign_public_ip: '{{ item.assign_public_ip | default(true) }}'
        exact_count: 1
        count_tag:
          instance: '{{ item.name }}'
      register: server
      loop: '{{ molecule_yml.platforms }}'
      async: 7200
      poll: 0

    - name: Wait for instance(s) creation to complete
      async_status:
        jid: '{{ item.ansible_job_id }}'
      loop: '{{ server.results }}'
      register: instance_create
      until: instance_create.finished
      delay: 20
      retries: 300

    # This functionality required python modules boto, boto3, botocore
    - name: Tag volumes
      ec2_tag:
        resource: >-
          {{ item
            | json_query("instances[0].block_device_mapping.*.volume_id")
            | first }}
        tags:
          Instance: '{{ item.instances[0].tags.instance }}'
          CreatedTime: '{{ lookup("pipe","date +%Y-%m-%d") }}'
          ManagedBy: 'Molecule'
      loop: '{{ instance_create.results }}'

    - name: Populate instance config dict
      set_fact:
        instance_conf_dict:
          instance: '{{ item.instances[0].tags.instance }}'
          address: '{{ item.instances[0].private_ip }}'
          public_ip: '{{ item.instances[0].public_ip | default("") }}'
          user: '{{ item.instances[0].tags.ssh_user | default(ansible_user) }}'
          port: '{{ (instance_create[0].item.platform in aws_platforms.linux) | ternary(ssh_port, winrm_port) }}'
          identity_file: '{{ keypair_path }}'
          instance_ids: '{{ item.instance_ids }}'
      loop: '{{ instance_create.results }}'
      register: instance_config_dict
      when: instance_create.changed | bool

    - name: Convert instance config dict to a list
      set_fact:
        instance_conf: >-
          {{ instance_config_dict.results
            | map(attribute='ansible_facts.instance_conf_dict') | list }}
      when: instance_create.changed | bool

    - name: Dump instance config
      copy:
        content: '{{ instance_conf | to_json | from_json | molecule_to_yaml | molecule_header }}'
        dest: '{{ molecule_instance_config }}'
      when: instance_create.changed | bool

    - name: Wait for SSH
      wait_for:
        port: '{{ item.port }}'
        host: '{{ item.address }}'
        delay: 2
        connect_timeout: 2
        timeout: 320
      loop: "{{ lookup('file', molecule_instance_config) | molecule_from_yaml }}"
